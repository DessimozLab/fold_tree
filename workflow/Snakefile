
#once snakemake is installed use the following command to test the struct tree


import snakemake.utils
snakemake.utils.min_version("7.8.0")
snake_dir = workflow.basedir
rootdir = ''.join([ sub + '/' for sub in snake_dir.split('/')[:-1] ] )
print(rootdir)

folders = glob_wildcards("{folders}/identifiers.txt").folders
mattypes = ['fident', 'alntmscore', 'lddt']
alntypes = ['0', '1']
foldseekpath = './foldseek/bin/foldseek '
print(folders[0:100] , '...')

rule all:
	input:
	#get all treescore and rf distance files for all alntypes
		expand( "{folder}/RFdistances.json" , folder = folders ),
		expand( "{folder}/{mattype}_{alntype}_treescores_struct_tree.json" , folder = folders , mattype = mattypes , alntype = alntypes ),
		expand( "{folder}/sequences.aln.fst.nwk.rooted" , folder = folders ),
		expand( "{folder}/treescores_sequences.json" , folder = folders )

rule calc_RF:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/fident_0_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/alntmscore_0_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/lddt_0_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/sequences.aln.fst.nwk.rooted",
		"{folder}/fident_1_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/alntmscore_1_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/lddt_1_struct_tree.nwk.PP.nwk.rooted" ,
		"{folder}/sequences.aln.fst.nwk.rooted",
	output:
		"{folder}/RFdistances.json" 
	log:
	    "{folder}/logs/RFdist.log" 
	script:
		"../src/calcRF.py"

rule calc_consensus:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/fident_0_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/alntmscore_0_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/lddt_0_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/sequences.aln.fst.nwk.rooted",
		"{folder}/fident_1_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/alntmscore_1_struct_tree.nwk.PP.nwk.rooted" , 
		"{folder}/lddt_1_struct_tree.nwk.PP.nwk.rooted" ,
		"{folder}/sequences.aln.fst.nwk.rooted",		
	output:
		"{folder}/consensus_struct.nwk" 
	log:
	    "{folder}/logs/CT.log" 
	script:
		"../src/getconsensustree.py"

rule calc_tax_score:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/sequence_dataset.csv",
		"{folder}/{mattype}_{alntype}_struct_tree.nwk.PP.nwk.rooted"
	output:
		"{folder}/{mattype}_{alntype}_treescores_struct_tree.json"
	log:
	    "{folder}/logs/{mattype}_{alntype}_struct_tree_scoring.log"
	script:
		"../src/calctreescores.py"


rule calc_tax_score_seq:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/sequence_dataset.csv",
		"{folder}/sequences.aln.fst.nwk.rooted"
	output:
		"{folder}/treescores_sequences.json"
	log:
	    "{folder}/logs/sequences_scoring.log"
	script:
		"../src/calctreescores.py"

rule mad_root_struct:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{mattype}_{alntype}_struct_tree.nwk.PP.nwk"
	output:
		"{folder}/{mattype}_{alntype}_struct_tree.nwk.PP.nwk.rooted"
	log:
	    "{folder}/logs/{mattype}_{alntype}_struct_madroot.log"
	shell:
		rootdir+'madroot/mad {wildcards.folder}/{wildcards.mattype}_{wildcards.alntype}_struct_tree.nwk.PP.nwk'

rule mad_root_seq:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/sequences.aln.fst.nwk"
	output:
		"{folder}/sequences.aln.fst.nwk.rooted"
	log:
	    "{folder}/logs/madrootseq.log"
	shell:
		rootdir +'madroot/mad  {wildcards.folder}/sequences.aln.fst.nwk'

rule postprocess:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{mattype}_{alntype}_struct_tree.nwk"
	output:
		"{folder}/{mattype}_{alntype}_struct_tree.nwk.PP.nwk"
	log:
	    "{folder}/logs/{mattype}_{alntype}_struct_postprocess.log"
	script:
		'../src/postprocess.py'

rule fastme:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{mattype}_{alntype}_fastmemat.txt"
	output:
		"{folder}/{mattype}_{alntype}_struct_tree.nwk"
	log:
	    "{folder}/logs/{mattype}_{alntype}_fastme.log"
	shell:
		'fastme -i {wildcards.folder}/{wildcards.mattype}_{wildcards.alntype}_fastmemat.txt -o {wildcards.folder}/{wildcards.mattype}_{wildcards.alntype}_struct_tree.nwk -n '

rule fasttree:
	conda:
		"config/snake_tree.yaml"
	input:
		alignment="{folder}/sequences.aln.fst"
	output:
		tree="{folder}/sequences.aln.fst.nwk"
	log:
	    "{folder}/logs/fasttree.log"
	params:
		extra="",
	wrapper:
		"v1.20.0/bio/fasttree"

rule foldseek2distmat:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/allvall_{alntype}.csv"
	output:
		"{folder}/fident_{alntype}_fastmemat.txt",
		"{folder}/alntmscore_{alntype}_fastmemat.txt",
		"{folder}/lddt_{alntype}_fastmemat.txt",
	log:
	    "{folder}/logs/{alntype}_foldseek2distmat.log"
	script:
		"../src/foldseekres2distmat.py"

rule foldseek_allvall_0:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/finalset.json"
	output:
		"{folder}/allvall_0.csv"
	log:
		"{folder}/logs/foldseekallvall.log"
	shell:
		foldseekpath + " easy-search {wildcards.folder}/structs/ {wildcards.folder}/structs/ {wildcards.folder}/allvall_0.csv {wildcards.folder}/tmp --format-output 'query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,lddt,lddtfull,alntmscore' --exhaustive-search --alignment-type 0" 

rule foldseek_allvall_1:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/finalset.json"
	output:
		"{folder}/allvall_1.csv"
	log:
		"{folder}/logs/foldseekallvall.log"
	shell:
		foldseekpath + " easy-search {wildcards.folder}/structs/* {wildcards.folder}/structs/* {wildcards.folder}/allvall_1.csv {wildcards.folder}/tmp --format-output 'query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,lddt,lddtfull,alntmscore' --exhaustive-search --alignment-type 1" 

rule clustalo:
	conda: 
		"config/snake_tree.yaml"
	input:
		"{folder}/sequences.fst",
	output:
		"{folder}/sequences.aln.fst",
	params:
		extra="",
	log:
	    "{folder}/logs/clustalo.log",
	threads: 1
	wrapper:
		"v1.20.0/bio/clustalo"

rule dl_ids_sequences:
	conda: 
		"config/snake_tree.yaml"
	input:
		ids="{folder}/identifiers.txt",
	output:
		"{folder}/sequence_dataset.csv",
	log:
	    "{folder}/logs/dlsequences.log"
	script:
		"../src/dl_sequences.py"

rule plddt:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/finalset.json",
	output:
		"{folder}/plddt.json"
	log:
	    "{folder}/logs/plddt.log"
	script:
		'../src/grabplddt.py'

rule dl_ids_structs:
	conda: 
		"config/snake_tree.yaml"
	input:
		"{folder}/sequence_dataset.csv",
	output:
		"{folder}/sequences.fst",
		"{folder}/finalset.json",
	log:
	    "{folder}/logs/dlstructs.log",
	params:
		extra="", 
	script:
		"../src/dl_structs.py"
