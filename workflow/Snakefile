
#once snakemake is installed use the following command to test the struct tree
#snakemake --cores 1 ./testdata/struct_tree.nwk --use-conda

import snakemake.utils
snakemake.utils.min_version("7.8.0")

folders = glob_wildcards("{folders}identifiers.txt").folders

"""
rule calctreescores:
	#use 
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/struct_tree.nwk" ,"{folder}sequences.aln.fst.nwk" , "{folder}sequence_dataset.csv"
	output:
		"{folder}/nodesscores.csv" , "{folder}/totalscores.csv" , "{folder}/treegraph.svg"
	log:
	    "{folder}logs/treescores.log"
	script:
		'../src/calctreescores.py'
"""

rule all:
    input:  expand("{folder}struct_tree.nwk.rooted", folder=folders  ) ,
    		expand("{folder}sequences.aln.fst.nwk.rooted", folder=folders  )



rule mad_root:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{alntype}.nwk"
	output:
		"{folder}/{alntype}.nwk.rooted"
	log:
	    "{folder}/logs/madroot{alntype}.log"
	shell:
		'/work/FAC/FBM/DBC/cdessim2/default/dmoi/software/mad/mad {wildcards.folder}/{wildcards.alntype}.nwk'


rule fastme:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}fastmemat.txt"
	output:
		"{folder}/{type}struct_tree.nwk"
	log:
	    "{folder}/logs/{type}fasttree.log"
	shell:
		'fastme -i {wildcards.folder}/{wildcards.type}fastmemat.txt -o {wildcards.folder}/{wildcards.type}struct_tree.nwk -n '

rule fasttree:
	conda:
		"config/snake_tree.yaml"
	input:
		alignment="{folder}/sequences.aln.fst"
	output:
		tree="{folder}/sequences.aln.fst.nwk"
	log:
	    "{folder}/logs/fasttree.log"
	params:
		extra="",  # Additional arguments
	wrapper:
		"v1.20.0/bio/fasttree"

rule foldseek2distmat:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/structaln_score.tsv"
	output:
		"{folder}/fastmemat.txt" , "{folder}/raw_fastmemat.txt"
	log:
	    "{folder}/logs/foldseek2distmat.log"
	script:
		"../src/foldseekres2distmat.py"

rule foldseek2tab:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/aln.0"
	output:
		"{folder}/structaln_score.tsv"
	log:
	    "{folder}/logs/foldseek2tab.log"

	shell:
		'foldseek createtsv {wildcards.folder}/structblobDB {wildcards.folder}/structblobDB {wildcards.folder}/aln {wildcards.folder}/structaln_score.tsv'


rule foldseek_allvall:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/structblobDB_h"
	output:
		"{folder}/aln.0"
	log:
	    "{folder}/logs/foldseekallvall.log"
	shell:
		'foldseek search {wildcards.folder}/structblobDB {wildcards.folder}/structblobDB {wildcards.folder}/aln {wildcards.folder}/tmp -a'

rule foldseekdb:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/missing_structs.txt"
	output:
		"{folder}/structblobDB_h"
	log:
	    "{folder}/logs/foldseekdb.log"
	shell:
		'foldseek createdb {wildcards.folder}/structs/ {wildcards.folder}/structblobDB '

rule dl_ids_sequences:
	conda: 
		"config/snake_tree.yaml"
	input:
		ids="{folder}/identifiers.txt",#path = config["path"]  # Input alignment file
	output:
		"{folder}/sequences.fst",
		"{folder}/sequence_dataset.csv",
	log:
	    "{folder}/logs/dlsequences.log"
	script:
		"../src/dl_sequences.py"

rule dl_ids_structs:
	conda: 
		"config/snake_tree.yaml"
	input:
		ids="{folder}/identifiers.txt",#path = config["path"]  # Input alignment file
	output:
		fasta="{folder}/missing_structs.txt", #path = config["path"] # Output tree file
	log:
	    "{folder}/logs/dlstructs.log",#path = config["path"]

	params:
		extra="",  # Additional arguments
	script:
		"../src/dl_structs.py"

rule clustalo:
	conda: 
		"config/snake_tree.yaml"
	input:
		"{folder}/sequences.fst",#path = config["path"]
	output:
		"{folder}/sequences.aln.fst",#path = config["path"]
	params:
		extra="",
	log:
	    "{folder}/logs/clustalo.log",# path = config["path"]
	threads: 1
	wrapper:
		"v1.20.0/bio/clustalo"
