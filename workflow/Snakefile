
#once snakemake is installed use the following command to test the struct tree
#snakemake --cores 1 ./testdata/struct_tree.nwk --use-conda
import snakemake.utils
snakemake.utils.min_version("7.8.0")
snake_dir = workflow.basedir
rootdir = ''.join([ sub + '/' for sub in snake_dir.split('/')[:-1] ] )
print(rootdir)

folders = glob_wildcards("{folders}/identifiers.txt").folders
types = ['struct', 'core']
alntypes = ['0', '2']


print(folders[0:100] , '...')

rule all:
	input:
	#get all treescore and rf distance files for all alntypes
		expand( "{folder}/{alntype}_RFdistances.json" , alntype = alntypes , folder = folders ),
		expand( "{folder}/treescores_core_{alntype}_tree.nwk.PP.nwk.rooted.json" , folder = folders , alntype = alntypes ),
		expand( "{folder}/treescores_struct_{alntype}_tree.nwk.PP.nwk.json" , folder = folders , alntype = alntypes ),
		expand( "{folder}/treescores_sequences.json" , folder = folders )

rule calc_RF:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/struct_{alntype}_tree.nwk.PP.nwk.rooted" , 
		"{folder}/sequences.aln.fst.nwk.rooted", 
		"{folder}/core_{alntype}_tree.nwk.PP.nwk.rooted",
	output:
		"{folder}/{alntype}_RFdistances.json" 
	log:
	    "{folder}/logs/{alntype}_RFdist.log" 
	script:
		"../src/calcRF.py"

rule calc_tax_score:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/sequence_dataset.csv",
		"{folder}/{type}_{alntype}_tree.nwk.PP.nwk.rooted"
	output:
		"{folder}/treescores_{type}_{alntype}.json"
	log:
	    "{folder}/logs/{type}_{alntype}_scoring.log"
	script:
		"../src/calctreescores.py"


rule calc_tax_score_seq:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/sequence_dataset.csv",
		"{folder}/sequences.aln.fst.nwk.rooted"
	output:
		"{folder}/treescores_sequences.json"
	log:
	    "{folder}/logs/sequences_scoring.log"
	script:
		"../src/calctreescores.py"


rule mad_root_struct:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}_{alntype}_tree.nwk.PP.nwk"
	output:
		"{folder}/{type}_{alntype}_tree.nwk.PP.nwk.rooted"
	log:
	    "{folder}/logs/{type}_{alntype}_madrootstruct.log"
	shell:
		rootdir+'madroot/mad {wildcards.folder}/{wildcards.type}_{wildcards.alntype}_tree.nwk.PP.nwk'

rule mad_root_seq:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/sequences.aln.fst.nwk"
	output:
		"{folder}/sequences.aln.fst.nwk.rooted"
	log:
	    "{folder}/logs/madrootseq.log"
	shell:
		rootdir +'madroot/mad  {wildcards.folder}/sequences.aln.fst.nwk'

rule corecut:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/struct_{alntype}_structaln_score.tsv",
		"{folder}/sequence_dataset.csv"
	output:
		"{folder}/struct_{alntype}_cores.csv"	
	log:
	    "{folder}/logs/{alntype}_corecut.log"
	script:
		'../src/clip_core.py'

rule postprocess:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}_{alntype}_tree.nwk"
	output:
		"{folder}/{type}_{alntype}_tree.nwk.PP.nwk"
	log:
	    "{folder}/logs/{type}_{alntype}_postprocess.log"
	script:
		'../src/postprocess.py'

rule fastme:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}_{alntype}_fastmemat.txt"
	output:
		"{folder}/{type}_{alntype}_tree.nwk"
	log:
	    "{folder}/logs/{type}_{alntype}_fastme.log"
	shell:
		'fastme -i {wildcards.folder}/{wildcards.type}_{wildcards.alntype}_fastmemat.txt -o {wildcards.folder}/{wildcards.type}_{wildcards.alntype}_tree.nwk -n '

rule fasttree:
	conda:
		"config/snake_tree.yaml"
	input:
		alignment="{folder}/sequences.aln.fst"
	output:
		tree="{folder}/sequences.aln.fst.nwk"
	log:
	    "{folder}/logs/fasttree.log"
	params:
		extra="",  # Additional arguments
	wrapper:
		"v1.20.0/bio/fasttree"

rule foldseek2distmat:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}_{alntype}_structaln_score.tsv"
	output:
		"{folder}/{type}_{alntype}_fastmemat.txt"
	log:
	    "{folder}/logs/{type}_{alntype}_foldseek2distmat.log"
	script:
		"../src/foldseekres2distmat.py"

rule foldseek2tab:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/core_aln_{alntype}.0"
	output:
		"{folder}/core_{alntype}_structaln_score.tsv"
	log:
	    "{folder}/logs/core_{alntype}_foldseek2tab.log"
	shell:
		'foldseek createtsv {wildcards.folder}/core_{wildcards.alntype}_structblobDB {wildcards.folder}/core_{wildcards.alntype}_structblobDB {wildcards.folder}/core_aln_{wildcards.alntype} {wildcards.folder}/core_{wildcards.alntype}_structaln_score.tsv'

rule foldseek2tab_struct:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/struct_aln_{alntype}.0"
	output:
		"{folder}/struct_{alntype}_structaln_score.tsv"
	log:
	    "{folder}/logs/struct_{alntype}_foldseek2tab.log"
	shell:
		'foldseek createtsv {wildcards.folder}/struct_structblobDB {wildcards.folder}/struct_structblobDB {wildcards.folder}/struct_aln_{wildcards.alntype} {wildcards.folder}/struct_{wildcards.alntype}_structaln_score.tsv'

rule foldseek_allvall_core:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/core_{alntype}_structblobDB_h"
	output:
		"{folder}/core_aln_{alntype}.0"
	log:
	    "{folder}/logs/core_{alntype}_foldseekallvall.log"
	shell:
		'foldseek search {wildcards.folder}/core_{wildcards.alntype}_structblobDB {wildcards.folder}/core_{wildcards.alntype}_structblobDB {wildcards.folder}/core_aln_{wildcards.alntype} {wildcards.folder}/tmp -a --alignment-type {wildcards.alntype}  --split-mode 2 --split-memory-limit 4G'

rule foldseek_allvall:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/struct_structblobDB_h"
	output:
		"{folder}/struct_aln_{alntype}.0"
	log:
		"{folder}/struct_{alntype}_foldseekallvall.log"
	shell:
		'foldseek search {wildcards.folder}/struct_structblobDB {wildcards.folder}/struct_structblobDB {wildcards.folder}/struct_aln_{wildcards.alntype} {wildcards.folder}/tmp -a --alignment-type {wildcards.alntype}  --split-mode 2 --split-memory-limit 4G' 

rule foldseekdb:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/finalset.json",
	output:
		"{folder}/struct_structblobDB_h"
	log:
	    "{folder}/logs/foldseekdb.log"
	shell:
		'foldseek createdb {wildcards.folder}/structs/ {wildcards.folder}/struct_structblobDB '

rule foldseekdb_core:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/struct_{alntype}_cores.csv",
	output:
		"{folder}/core_{alntype}_structblobDB_h"
	log:
	    "{folder}/logs/{alntype}foldseekdb.log"
	shell:
		'foldseek createdb {wildcards.folder}/structs/ {wildcards.folder}/core_{wildcards.alntype}_structblobDB '

rule clustalo:
	conda: 
		"config/snake_tree.yaml"
	input:
		"{folder}/sequences.fst",#path = config["path"]
	output:
		"{folder}/sequences.aln.fst",#path = config["path"]
	params:
		extra="",
	log:
	    "{folder}/logs/clustalo.log",# path = config["path"]
	threads: 1
	wrapper:
		"v1.20.0/bio/clustalo"


rule dl_ids_sequences:
	conda: 
		"config/snake_tree.yaml"
	input:
		ids="{folder}/identifiers.txt",#path = config["path"]  # Input alignment file
	output:
		"{folder}/sequence_dataset.csv",
	log:
	    "{folder}/logs/dlsequences.log"
	script:
		"../src/dl_sequences.py"

rule plddt:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/finalset.json",
	output:
		"{folder}/plddt.json"
	log:
	    "{folder}/logs/plddt.log"
	script:
		'../src/grabplddt.py'

rule dl_ids_structs:
	conda: 
		"config/snake_tree.yaml"
	input:
		"{folder}/sequence_dataset.csv",
	output:
		"{folder}/sequences.fst",
		"{folder}/finalset.json",
	log:
	    "{folder}/logs/dlstructs.log",#path = config["path"]

	params:
		extra="",  # Additional arguments
	script:
		"../src/dl_structs.py"
