
#once snakemake is installed use the following command to test the struct tree
#snakemake --cores 1 ./testdata/struct_tree.nwk --use-conda

import snakemake.utils
snakemake.utils.min_version("7.8.0")

folders = glob_wildcards("{folders}/identifiers.txt").folders


rule all:
    input:
		"{folder}/RFdistances.json"

rule calc_RF:
	conda:
		"config/snake_tree.yaml"
	input:
		expand("{folder}/{alntype}.nwk.rooted",folder=folders , alntype = [ 'struct_tree' , 'sequences.aln.fst' ])
	output:
		"{folder}/RFdistances.json" 
	log:
	    "{folder}/logs/RFdist.log" 
	script:
		"../src/calcRF.py"

rule calc_tax_score:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{alntype}.nwk.rooted"
	output:
		"{folder}/{alntype}.nwk.rooted.scores"
	log:
	    "{folder}/logs/scoring{alntype}.log"
	script:
		"../src/calctreescores.py"

rule mad_root:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}.nwk"
	output:
		"{folder}/{type}.nwk.rooted"
	log:
	    "{folder}/logs/madroot{type}.log"
	shell:
		'/work/FAC/FBM/DBC/cdessim2/default/dmoi/software/mad/mad {wildcards.folder}/{wildcards.type}.nwk'

rule postprocess:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}struct_tree.nwk"
	output:
		"{folder}/{type}struct_tree_PP.nwk"
	log:
	    "{folder}/logs/{type}postprocess.log"
	script:
		'../src/postprocess.py'

rule fastme:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/{type}_fastmemat.txt"
	output:
		"{folder}/{type}struct_tree.nwk"
	log:
	    "{folder}/logs/{type}fasttree.log"
	shell:
		'fastme -i {wildcards.folder}/{wildcards.type}fastmemat.txt -o {wildcards.folder}/{wildcards.type}struct_tree.nwk -n '

rule fasttree:
	conda:
		"config/snake_tree.yaml"
	input:
		alignment="{folder}/sequences.aln.fst"
	output:
		tree="{folder}/sequences.aln.fst.nwk"
	log:
	    "{folder}/logs/fasttree.log"
	params:
		extra="",  # Additional arguments
	wrapper:
		"v1.20.0/bio/fasttree"

rule foldseek2distmat:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/structaln_score.tsv"
	output:
		"{folder}/kernel_fastmemat.txt" , "{folder}/rawscore_fastmemat.txt"
	log:
	    "{folder}/logs/foldseek2distmat.log"
	script:
		"../src/foldseekres2distmat.py"

rule foldseek2tab:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/aln.0"
	output:
		"{folder}/structaln_score.tsv"
	log:
	    "{folder}/logs/foldseek2tab.log"

	shell:
		'foldseek createtsv {wildcards.folder}/structblobDB {wildcards.folder}/structblobDB {wildcards.folder}/aln {wildcards.folder}/structaln_score.tsv'


rule foldseek_allvall:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/structblobDB_h"
	output:
		"{folder}/aln.0"
	log:
	    "{folder}/logs/foldseekallvall.log"
	shell:
		'foldseek search {wildcards.folder}/structblobDB {wildcards.folder}/structblobDB {wildcards.folder}/aln {wildcards.folder}/tmp -a'

rule foldseekdb:
	conda:
		"config/snake_tree.yaml"
	input:
		"{folder}/missing_structs.txt"
	output:
		"{folder}/structblobDB_h"
	log:
	    "{folder}/logs/foldseekdb.log"
	shell:
		'foldseek createdb {wildcards.folder}/structs/ {wildcards.folder}/structblobDB '


rule clustalo:
	conda: 
		"config/snake_tree.yaml"
	input:
		"{folder}/sequences.fst",#path = config["path"]
	output:
		"{folder}/sequences.aln.fst",#path = config["path"]
	params:
		extra="",
	log:
	    "{folder}/logs/clustalo.log",# path = config["path"]
	threads: 1
	wrapper:
		"v1.20.0/bio/clustalo"



rule dl_ids_sequences:
	conda: 
		"config/snake_tree.yaml"
	input:
		ids="{folder}/identifiers.txt",#path = config["path"]  # Input alignment file
	output:
		"{folder}/sequences.fst",
		"{folder}/sequence_dataset.csv",
	log:
	    "{folder}/logs/dlsequences.log"
	script:
		"../src/dl_sequences.py"

rule dl_ids_structs:
	conda: 
		"config/snake_tree.yaml"
	input:
		ids="{folder}/identifiers.txt",#path = config["path"]  # Input alignment file
	output:
		fasta="{folder}/missing_structs.txt", #path = config["path"] # Output tree file
	log:
	    "{folder}/logs/dlstructs.log",#path = config["path"]

	params:
		extra="",  # Additional arguments
	script:
		"../src/dl_structs.py"
